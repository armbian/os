name: Repository update v2
on:
  repository_dispatch:
    types: ["Repository update"]
#  schedule:
#    - cron: "00 3 * * *"
  workflow_dispatch:
    inputs:
      BUILD_BRANCH:
        description: Build branch
        required: false
        default: main
        type: string
      BUILD_RUNNER:
        description: Build runner
        required: false
        default: ubuntu-latest
        type: string
      TARGET_REPOSITORY:
        type: choice
        description: Select repository
        options:
        - beta.armbian.com
        - apt.armbian.com
      UPDATE_REPOSITORY:
        type: boolean
        description: Update repository
        default: true

env:

  # For easier reuse across the multiple chunks
  BUILD_REPOSITORY: ${{ github.repository_owner }}/build
  ACCESS_NAME: ${{ github.repository_owner }}
  BUILD_REF: "main" # branch or tag or sha1

  # Armbian envs. Adjust to your needs.
  OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically. It does _not_ override the targets.yaml during info resolution.
  DOCKER_SKIP_UPDATE: "no" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
  
  # Added to every image build arguments.
  EXTRA_PARAMS_IMAGE: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' 'IMAGE_VERSION=20230400-${{ github.repository_owner }}' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:

  matrix_prep:
    name: "Prepare Matrix"
    if: ${{ github.repository_owner == 'armbian' }}
    runs-on: "fast"
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      - name: Checkout build repo
        uses: actions/checkout@v3
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ env.BUILD_REF }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Checkout Armbian OS Config
        uses: actions/checkout@v3.3.0
        with:
          repository: armbian/os
          ref:  json
          clean: false
          fetch-depth: 1
          path: os

      - name: "Rsync userpatches"
        run: |

          rsync -av os/userpatches/. userpatches/

      - name: grab the sha1 of the latest commit
        id: latest-commit
        run: echo "sha1=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: GitHub cache
        id: cache-restore
        uses: actions/cache@v3
        with:
          path: |
            cache/memoize
            cache/oci/positive
          key: ${{ runner.os }}-matrix-cache-${{ github.sha }}-${{ steps.latest-commit.outputs.sha1 }}"
          restore-keys: |
            ${{ runner.os }}-matrix-cache-

      # Login to ghcr.io, we're gonna do a lot of OCI lookups.
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}   # GitHub actions builtin token. repo has to have pkg access.

      - name: Prepare Info JSON and Matrices
        id: prepare-matrix
        run: |

          # clean self-hosted ones
          sudo rm -rf outpud/*

          # this sets outputs "artifact-matrix" and "image-matrix"
          bash ./compile.sh matrix armbian-images \
          CLEAN_INFO=yes \
          CLEAN_MATRIX=yes \
          MATRIX_ARTIFACT_CHUNKS=16 \
          MATRIX_IMAGE_CHUNKS=16 \
          CHECK_OCI=yes \
          TARGETS_FILENAME=targets.yaml \
          SKIP_IMAGES=no \
          DEBUG=yes #\
          #IMAGES_ONLY_OUTDATED_ARTIFACTS=yes

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

    outputs:
      artifact: ${{ steps.prepare-matrix.outputs.artifact-matrix }}
      image: ${{ steps.prepare-matrix.outputs.image-matrix }}
      build-sha1: ${{ steps.latest-commit.outputs.sha1 }}

  build-artifacts-chunk1: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk1 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk2: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk2 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk3: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk3 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk4: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk4 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk5: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk5 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk6: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk6 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk7: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk7 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk8: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk8 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk9: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk9 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk10: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk10 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk11: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk11 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk12: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk12 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk13: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk13 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk14: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk14 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk15: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk15 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk16: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'armbian' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk16 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: chown cache memoize/oci back to normal user
        run: |

          sudo chown -R $USER:$USER build/cache/{memoize,oci,tools,pip,aptcache,pip,sources/evalcache,sources/oh-my-zsh} || true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ env.ACCESS_NAME }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  external:
    name: "Download external"
    needs: [ build-artifacts-chunk1, build-artifacts-chunk2, build-artifacts-chunk3, build-artifacts-chunk4, build-artifacts-chunk5, build-artifacts-chunk6, build-artifacts-chunk7, build-artifacts-chunk8, build-artifacts-chunk9, build-artifacts-chunk10, build-artifacts-chunk11, build-artifacts-chunk12, build-artifacts-chunk13, build-artifacts-chunk14, build-artifacts-chunk15, build-artifacts-chunk16 ]

    if: ${{ github.repository_owner == 'Armbian' }}
    uses: armbian/scripts/.github/workflows/download-and-test-external.yml@main
    with:
      ACCESS_NAME: armbian
      BUILD_RUNNER: ${{ inputs.BUILD_RUNNER }}
    secrets:
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  apt-armbian-com:

    name: "Update https://apt.armbian.com"
    needs: [external]
    if: ${{ inputs.UPDATE_REPOSITORY || 'true' && github.repository_owner == 'Armbian' }}
    runs-on: [self-hosted, Linux, local]
    steps:
      - uses: armbian/actions/triggers@main
        with:
          KEY: ${{ secrets.KEY_REPOSITORY }}
          USER: ${{ secrets.USER_REPOSITORY }}
          HOST: ${{ secrets.HOST_REPOSITORY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS_REPOSITORY }}

  beta-armbian-com:

    name: "Update https://beta.armbian.com"
    needs: [apt-armbian-com]
    if: ${{ inputs.UPDATE_REPOSITORY || 'true' && github.repository_owner == 'Armbian' }}
    runs-on: [self-hosted, Linux, local]
    steps:
      - uses: armbian/actions/triggers@main
        with:
          KEY: ${{ secrets.KEY_REPOSITORY_BETA }}
          USER: ${{ secrets.USER_REPOSITORY }}
          HOST: ${{ secrets.HOST_REPOSITORY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS_REPOSITORY }}

  sync-servers:

    name: "Sync servers"
    needs: [apt-armbian-com,beta-armbian-com]
    if: ${{ inputs.UPDATE_REPOSITORY || 'true' && github.repository_owner == 'Armbian' }}
    runs-on: [self-hosted, Linux, local]
    steps:
      - uses: armbian/actions/triggers@main
        with:
          KEY: ${{ secrets.KEY_SYNC_MIRRORS }}
          USER: ${{ secrets.USER_REPOSITORY }}
          HOST: ${{ secrets.HOST_REPOSITORY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS_REPOSITORY }}
