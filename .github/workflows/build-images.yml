# DO NOT EDIT THIS FILE AS ITS AUTO GENERATED
name: Build Official Images
on:
  workflow_dispatch:
    inputs:
      runner:
        type: choice
        description: 'Build Infrastructure'
        options:
        - public
        - private
        default: private
      board:
        type: choice
        description: 'Board'
        options:
        # boards
        - bananapi
        - bananapicm4io
        - bananapim1plus
        - bananapim2
        - bananapim2plus
        - bananapim2pro
        - bananapim2s
        - bananapim2ultra
        - bananapim2zero
        - bananapim3
        - bananapim5
        - bananapim64
        - bananapipro
        - bananapir2
        - bananapir2pro
        - beaglev
        - bigtreetech-cb1
        - clearfogbase
        - clearfogpro
        - clockworkpi-a06
        - cubieboard
        - cubieboard2
        - cubieboard4
        - cubietruck
        - cubietruckplus
        - cubox-i
        - espressobin
        - fe-som-rk3399
        - firefly-rk3399
        - helios4
        - helios64
        - hinlink-h88k
        - imx7sabre
        - indiedroid-nova
        - jethubj100
        - jethubj80
        - jetson-nano
        - khadas-edge
        - khadas-edge2
        - khadas-vim1
        - khadas-vim2
        - khadas-vim3
        - khadas-vim3l
        - lafrite
        - lamobo-r1
        - lepotato
        - lime-a10
        - lime-a33
        - lime-a64
        - lime
        - lime2
        - macchiatobin-doubleshot
        - mangopi-mq
        - mekotronics-r58-minipc
        - mekotronics-r58x-4g
        - mekotronics-r58x
        - melea1000
        - micro
        - microzed
        - miqi
        - mixtile-blade3
        - mk808c
        - nanopct3
        - nanopct3plus
        - nanopct4
        - nanopct6
        - nanopi-r1
        - nanopi-r1s-h5
        - nanopi-r2c
        - nanopi-r2s
        - nanopi-r4s
        - nanopi-r4se
        - nanopi-r6s
        - nanopia64
        - nanopiair
        - nanopiduo
        - nanopiduo2
        - nanopifire3
        - nanopik1plus
        - nanopik2-s905
        - nanopim1
        - nanopim1plus
        - nanopim1plus2
        - nanopim3
        - nanopim4
        - nanopim4v2
        - nanopineo
        - nanopineo2
        - nanopineo2black
        - nanopineo3
        - nanopineo4
        - nanopineocore2
        - nanopineoplus2
        - nezha
        - odroidc1
        - odroidc2
        - odroidc4
        - odroidhc4
        - odroidm1
        - odroidn2
        - odroidxu4
        - olimex-som-a20
        - olimex-som204-a20
        - olimex-teres-a64
        - olinux-som-a13
        - onecloud
        - orangepi-r1
        - orangepi-r1plus-lts
        - orangepi-r1plus
        - orangepi-rk3399
        - orangepi
        - orangepi2
        - orangepi3-lts
        - orangepi3
        - orangepi4-lts
        - orangepi4
        - orangepi5-plus
        - orangepi5
        - orangepilite
        - orangepilite2
        - orangepimini
        - orangepione
        - orangepioneplus
        - orangepipc
        - orangepipc2
        - orangepipcplus
        - orangepiplus
        - orangepiplus2e
        - orangepiprime
        - orangepiwin
        - orangepizero
        - orangepizero2
        - orangepizeroplus
        - orangepizeroplus2-h3
        - orangepizeroplus2-h5
        - panther-x2
        - pcduino2
        - pcduino3
        - pcduino3nano
        - pine64
        - pine64so
        - pinebook-a64
        - pinebook-pro
        - pinecube
        - pineh64-b
        - pineh64
        - qemu-uboot-arm64
        - qemu-uboot-x86
        - quartz64a
        - quartz64b
        - radxa-e25
        - radxa-zero
        - radxa-zero2
        - recore
        - renegade
        - roc-rk3399-pc
        - rock-3a
        - rock-5-cmio
        - rock-5a
        - rock-5b
        - rock64
        - rockpi-4a
        - rockpi-4b
        - rockpi-4bplus
        - rockpi-4c
        - rockpi-4cplus
        - rockpi-e
        - rockpi-n10
        - rockpi-s
        - rockpro64
        - rpi4b
        - sk-am64b
        - star64
        - station-m1
        - station-m2
        - station-m3
        - station-p1
        - station-p2
        - thinkpad-x13s
        - tinkerboard-2
        - tinkerboard
        - tritium-h3
        - tritium-h5
        - udoo
        - uefi-arm64
        - uefi-riscv64
        - uefi-x86
        - unleashed
        - unmatched
        - virtual-qemu
        - visionfive
        - visionfive2
        - zeropi
        - all
        default: 'all'
      bump:
        type: boolean
        description: Bump version
        default: true
      version:
        description: 'Version override'
        required: false
        default: ''
      gitbranch:
        description: 'Build Git Branch'
        required: false
        default: 'main'

jobs:

#  Kernel:
#   name: "Update kernel cache"    
#   uses: armbian/scripts/.github/workflows/build-kernel-cache.yml@main
#   with:
#     ACCESS_NAME: igorpecovnik
#     BUILD_BRANCH: ""
#     BUILD_RUNNER: ${{ inputs.BUILD_RUNNER }}
#   secrets:
#     ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
#     KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
#     KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  generaterelease:

#    needs: Kernel
    name: "Generate release"
    if: ${{ github.repository_owner == 'Armbian' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.releases.outputs.version}}
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3.5.2
      with:
        clean: false
    
    - name: "Generate version"
      if: ${{ github.event.inputs.bump == 'true' && github.event.inputs.version == '' }}
      id: changelog
      uses: TriPSs/conventional-changelog-action@v3.19.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        git-message: 'Bump release to {version}'
        git-user-name: armbianworker
        git-user-email: info@armbian.com
        output-file: 'false'
        skip-version-file: 'false'
        skip-on-empty: 'false'
        skip-commit: 'false'
        skip-ci: 'false'
        version-file: "stable.json"
        pre-release: "false"
        git-branch: 'main'
        tag-prefix: ''
        pre-release-identifier: 'trunk'

    - name: Save
      id: releases
      run: |
        
        echo "${{ steps.changelog.outputs.tag }}" > tag
        echo "version=${{ steps.changelog.outputs.tag }}${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

        if [[ "${{ github.event.inputs.bump }}" != 'true' ]]; then
            # in case we don't bump or input, here we read it from
            echo "$(cat stable.json | jq -r '.version')" > tag
            echo "version=$(cat stable.json | jq -r '.version')" >> $GITHUB_OUTPUT
        fi

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: assets-for-download
        path: tag
        retention-days: 5
  
  Cluster_1:

    needs: [generaterelease]
    name: "Cluster 1/6"
    if: ${{ success() && github.repository_owner == 'Armbian' }}
    uses: armbian/scripts/.github/workflows/build-images.yml@main

    with:

      config: "${{ github.event.inputs.config || 'default.conf' }}"
      gitbranch: "${{ github.event.inputs.gitbranch || 'main' }}"
      release: "stable"
      deploy: true
      parallel: 64
      board: '${{ github.event.inputs.board }}'
      part: 1
      of: 6
      version: "${{ needs.generaterelease.outputs.version }}"

    secrets:
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      KEY_ARMBIAN_UPLOAD: ${{ secrets.KEY_ARMBIAN_UPLOAD }}
      KNOWN_HOSTS_ARMBIAN_UPLOAD: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
      ARMBIAN_HOST_UPLOAD: ${{ secrets.ARMBIAN_HOST_UPLOAD }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}

  Cluster_2:

    needs: [generaterelease]
    name: "Cluster 2/6"
    if: ${{ success() && github.repository_owner == 'Armbian' }}
    uses: armbian/scripts/.github/workflows/build-images.yml@main

    with:

      config: "${{ github.event.inputs.config || 'default.conf' }}"
      gitbranch: "${{ github.event.inputs.gitbranch || 'main' }}"
      release: "stable"
      deploy: true
      parallel: 64
      board: '${{ github.event.inputs.board }}'
      part: 2
      of: 6
      version: "${{ needs.generaterelease.outputs.version }}"

    secrets:
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      KEY_ARMBIAN_UPLOAD: ${{ secrets.KEY_ARMBIAN_UPLOAD }}
      KNOWN_HOSTS_ARMBIAN_UPLOAD: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
      ARMBIAN_HOST_UPLOAD: ${{ secrets.ARMBIAN_HOST_UPLOAD }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}

  Cluster_3:

    needs: [generaterelease]
    name: "Cluster 3/6"
    if: ${{ success() && github.repository_owner == 'Armbian' }}
    uses: armbian/scripts/.github/workflows/build-images.yml@main

    with:

      config: "${{ github.event.inputs.config || 'default.conf' }}"
      gitbranch: "${{ github.event.inputs.gitbranch || 'main' }}"
      release: "stable"
      deploy: true
      parallel: 64
      board: '${{ github.event.inputs.board }}'
      part: 3
      of: 6
      version: "${{ needs.generaterelease.outputs.version }}"

    secrets:
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      KEY_ARMBIAN_UPLOAD: ${{ secrets.KEY_ARMBIAN_UPLOAD }}
      KNOWN_HOSTS_ARMBIAN_UPLOAD: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
      ARMBIAN_HOST_UPLOAD: ${{ secrets.ARMBIAN_HOST_UPLOAD }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}

  Cluster_4:

    needs: [generaterelease]
    name: "Cluster 4/6"
    if: ${{ success() && github.repository_owner == 'Armbian' }}
    uses: armbian/scripts/.github/workflows/build-images.yml@main

    with:

      config: "${{ github.event.inputs.config || 'default.conf' }}"
      gitbranch: "${{ github.event.inputs.gitbranch || 'main' }}"
      release: "stable"
      deploy: true
      parallel: 64
      board: '${{ github.event.inputs.board }}'
      part: 4
      of: 6
      version: "${{ needs.generaterelease.outputs.version }}"

    secrets:
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      KEY_ARMBIAN_UPLOAD: ${{ secrets.KEY_ARMBIAN_UPLOAD }}
      KNOWN_HOSTS_ARMBIAN_UPLOAD: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
      ARMBIAN_HOST_UPLOAD: ${{ secrets.ARMBIAN_HOST_UPLOAD }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}

  Cluster_5:

    needs: [generaterelease]
    name: "Cluster 5/6"
    if: ${{ success() && github.repository_owner == 'Armbian' }}
    uses: armbian/scripts/.github/workflows/build-images.yml@main

    with:

      config: "${{ github.event.inputs.config || 'default.conf' }}"
      gitbranch: "${{ github.event.inputs.gitbranch || 'main' }}"
      release: "stable"
      deploy: true
      parallel: 64
      board: '${{ github.event.inputs.board }}'
      part: 5
      of: 6
      version: "${{ needs.generaterelease.outputs.version }}"

    secrets:
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      KEY_ARMBIAN_UPLOAD: ${{ secrets.KEY_ARMBIAN_UPLOAD }}
      KNOWN_HOSTS_ARMBIAN_UPLOAD: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
      ARMBIAN_HOST_UPLOAD: ${{ secrets.ARMBIAN_HOST_UPLOAD }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}

  Cluster_6:

    needs: [generaterelease]
    name: "Cluster 6/6"
    if: ${{ success() && github.repository_owner == 'Armbian' }}
    uses: armbian/scripts/.github/workflows/build-images.yml@main

    with:

      config: "${{ github.event.inputs.config || 'default.conf' }}"
      gitbranch: "${{ github.event.inputs.gitbranch || 'main' }}"
      release: "stable"
      deploy: true
      parallel: 64
      board: '${{ github.event.inputs.board }}'
      part: 6
      of: 6
      version: "${{ needs.generaterelease.outputs.version }}"

    secrets:
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      KEY_ARMBIAN_UPLOAD: ${{ secrets.KEY_ARMBIAN_UPLOAD }}
      KNOWN_HOSTS_ARMBIAN_UPLOAD: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
      ARMBIAN_HOST_UPLOAD: ${{ secrets.ARMBIAN_HOST_UPLOAD }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}


  Closing:

    name: "Closing"
    needs: [Cluster_1,Cluster_2,Cluster_3,Cluster_4,Cluster_5,Cluster_6]
    runs-on: ubuntu-latest
    steps:
    
    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
         name: assets-for-download
         path: tag

    - name: "Generate key id" # We need this in case we run multiple runners on one machine
      run: echo "TAG=$(cat tag/tag)" >> $GITHUB_ENV
      shell: bash

    - name: "Keep only 3 releases"
      uses: Vucko130/delete-older-releases@v0.2.2
      with:
        keep_latest: 3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
    - name: "Purge action workflow logs"
      uses: igorjs/gh-actions-clean-workflow@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        days_old: 14

    - uses: ncipollo/release-action@v1
      if: ${{ github.repository_owner == 'Armbian' && github.event.inputs.version == '' }}
      with:
        tag: ${{ env.TAG }}
        omitBody: true
        omitName: true
        allowUpdates: true
        makeLatest: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - uses: geekyeggo/delete-artifact@v2
      with:
         name: assets-for-download
