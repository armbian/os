name: Download update (admin)
on:
  repository_dispatch:
    types: ["Repository update"]
  workflow_dispatch:
    inputs:
      SKIP:
        description: 'yes = skip existing'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

concurrency:
  group: download
  cancel-in-progress: false

jobs:

  Check:

    name: "Check membership"
    runs-on: fast
    steps:

      - name: "Check membership"
        uses: armbian/actions/team-check@main
        with:
          ORG_MEMBERS: ${{ secrets.ORG_MEMBERS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEAM: "Release manager"

  Upload:
    needs: Check
    name: "Upload to servers"
    outputs:
      matrix: ${{steps.json.outputs.JSON_CONTENT}}
    runs-on: ubuntu-latest
    steps:

      - name: Get primary mirrors from database
        id: json
        run: |
          echo 'JSON_CONTENT<<EOF' >> $GITHUB_OUTPUT
          curl -H "Authorization: Token ${{ secrets.NETBOX_TOKEN }}" -H "Accept: application/json; indent=4" \
          "https://stuff.armbian.com/netbox/api/virtualization/virtual-machines/?limit=500&name__empty=false&device_role=Mirror&tag=push&status=failed&status=active" \
          | jq '.results[] | .name' | grep -v null | sed "s/\"//g" | jq -cnR '[inputs | select(length>0)]' | jq >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  Sync:
    name: "Files"
    runs-on: rsync
    needs: Upload
    outputs:
      matrix: ${{needs.Upload.outputs.matrix}}
    if: ${{ needs.Upload.outputs.matrix != '[]' && needs.Upload.outputs.matrix != '' }}
    timeout-minutes: 60
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:

        node: ${{fromJson(needs.Upload.outputs.matrix)}}

    steps:

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_UPLOAD }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
          if_key_exists: replace

      - name: What to sync?
        run: |

          JSON=$(curl -H "Authorization: Token ${{ secrets.NETBOX_TOKEN }}" -H "Accept: application/json; indent=4" \
          "https://stuff.armbian.com/netbox/api/virtualization/virtual-machines/?limit=500&name__empty=false&name=${{ matrix.node }}" | jq)
          SERVER_PATH=$(echo $JSON | jq '.results[] | .custom_fields["path"]' | sed "s/\"//g")
          SERVER_PORT=$(echo $JSON | jq '.results[] | .custom_fields["port"]' | sed "s/\"//g")
          SERVER_USERNAME=$(echo $JSON | jq '.results[] | .custom_fields["username"]' | sed "s/\"//g")

          TARGETS=($(echo $JSON | jq '.results[] | .tags' | jq '.[].name' | grep -v null | grep -v Push | sed "s/\"//g"))

          [[ "${{ inputs.SKIP }}" == yes ]] && SWITCH="--ignore-existing-files"

          for target in "${TARGETS[@]}"; do
              echo "Synching $target" >> $GITHUB_STEP_SUMMARY
              if [[ "$target" == "images" ]]; then rsync -ar "${SWITCH}" --dry-run --progress -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" /storage/incoming/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/dl ; fi
          done

  Index:
    name: "Index"
    runs-on: rsync
    needs: Sync
    if: ${{ needs.Sync.outputs.matrix != '[]' && needs.Sync.outputs.matrix != '' }}
    timeout-minutes: 60
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:

        node: ${{fromJson(needs.Sync.outputs.matrix)}}

    steps:

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_UPLOAD }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
          if_key_exists: replace


      - name: What to sync?
        run: |

          JSON=$(curl -H "Authorization: Token ${{ secrets.NETBOX_TOKEN }}" -H "Accept: application/json; indent=4" \
          "https://stuff.armbian.com/netbox/api/virtualization/virtual-machines/?limit=500&name__empty=false&name=${{ matrix.node }}" | jq)
          SERVER_PATH=$(echo $JSON | jq '.results[] | .custom_fields["path"]' | sed "s/\"//g")
          SERVER_PORT=$(echo $JSON | jq '.results[] | .custom_fields["port"]' | sed "s/\"//g")
          SERVER_USERNAME=$(echo $JSON | jq '.results[] | .custom_fields["username"]' | sed "s/\"//g")

          TARGETS=($(echo $JSON | jq '.results[] | .tags' | jq '.[].name' | grep -v null | grep -v Push | sed "s/\"//g"))

          [[ "${{ inputs.SKIP }}" == yes ]] && SWITCH="--ignore-existing-files"

          for target in "${TARGETS[@]}"; do
              echo "Synching $target" >> $GITHUB_STEP_SUMMARY
              if [[ "$target" == "images" ]]; then rsync -ar "${SWITCH}" --progress --dry-run --delete -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" /storage/incoming/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/dl ; fi
          done

  dispatch:
    name: "Refresh web and redirector index"
    if: ${{ github.repository_owner == 'Armbian' }}
    needs: Index
    runs-on: ubuntu-latest
    steps:

      - name: "Run webindex update action"
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.DISPATCH }}
          repository: armbian/os
          event-type: "Webindex update"

      - name: "Run redirector update action"
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.DISPATCH }}
          repository: armbian/os
          event-type: "Redirector update"

#
#      - name: Repository Dispatch
#        uses: peter-evans/repository-dispatch@v2
#        with:
#          token: ${{ secrets.DISPATCH }}
#          repository: 'armbian/os'
#          event-type: "Smoke tests"
#          client-payload: '{"powermanagement": true}'
