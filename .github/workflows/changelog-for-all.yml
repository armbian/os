name: "PR Digest"

on:
  workflow_dispatch:
    inputs:
      scope:
        description: "Comma-separated repos (owner/repo) OR 'org:armbian'"
        required: false
        default: "armbian/build,armbian/configng"
      tz:
        description: "Timezone for date windows (IANA)"
        required: false
        default: "Europe/Ljubljana"
  schedule:
    - cron: "5 6 * * MON"   # weekly, Mondays 06:05 UTC

permissions:
  contents: read

jobs:
  pr-digest:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SCOPE: ${{ inputs.scope || 'armbian/build,armbian/configng' }}
      TZ: ${{ inputs.tz || 'Europe/Ljubljana' }}

    steps:
      - name: Set up jq (already present on ubuntu, but ensure)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Compute time windows
        id: when
        shell: bash
        run: |
          export TZ="${TZ}"
          # TODAY in UTC for API queries; we'll still compute since dates in UTC
          UNTIL_UTC="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          SINCE_WEEK_UTC="$(date -u -d '7 days ago' +%Y-%m-%dT%H:%M:%SZ)"
          SINCE_3MO_UTC="$(date -u -d '90 days ago' +%Y-%m-%dT%H:%M:%SZ)"
          echo "UNTIL_UTC=$UNTIL_UTC" >> "$GITHUB_ENV"
          echo "SINCE_WEEK_UTC=$SINCE_WEEK_UTC" >> "$GITHUB_ENV"
          echo "SINCE_3MO_UTC=$SINCE_3MO_UTC" >> "$GITHUB_ENV"

      - name: Create workspace
        run: mkdir -p out

      - name: Gather PRs â€” helper script
        shell: bash
        run: |
          cat > pr_fetch.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          scope="${1:-armbian/build}"
          since="${2:?}"
          until="${3:?}"
          outfile="${4:?}"

          # Build search query:
          # - if "org:NAME" use org-wide search; else split repo list.
          collect() {
            local q="$1"
            # Use --paginate and per_page=100 to fetch all
            gh api -X GET search/issues \
              -f q="$q" \
              -f sort="updated" -f order="desc" \
              -f per_page=100 --paginate \
              -q '.items[] | {number: .number, repo: (.repository_url | sub("^.*/repos/";"")), title: .title, pr_url: .pull_request.url}'
          }

          tmp="$(mktemp)"
          if [[ "$scope" == org:* ]]; then
            org="${scope#org:}"
            q="org:${org} is:pr is:merged merged:${since}..${until} archived:false"
            collect "$q" > "$tmp"
          else
            # Comma-separated repos
            IFS=',' read -r -a repos <<< "$scope"
            : > "$tmp"
            for r in "${repos[@]}"; do
              r_trim="$(echo "$r" | xargs)"
              q="repo:${r_trim} is:pr is:merged merged:${since}..${until}"
              collect "$q" >> "$tmp"
            done
          fi

          # For each PR, enrich with author and merge_commit_sha (short)
          # De-dup by (repo, number); sort by merged_at ascending
          jq -s '
            map({repo, number, pr: .pr_url}) 
            | unique_by(.repo + "|" + (.number|tostring))
          ' "$tmp" | jq -c '.[]' | while read -r row; do
            repo=$(echo "$row" | jq -r .repo)
            num=$(echo "$row"  | jq -r .number)

            pr_json=$(gh api "repos/${repo}/pulls/${num}")
            title=$(echo "$pr_json" | jq -r .title)
            author=$(echo "$pr_json" | jq -r .user.login)
            merged_at=$(echo "$pr_json" | jq -r .merged_at)
            merge_sha=$(echo "$pr_json" | jq -r .merge_commit_sha)
            short_sha=${merge_sha:0:7}

            printf "%s\t%s\t%s\t%s\t%s\n" "$merged_at" "$title" "$author" "$short_sha" "$repo"
          done | sort -k1,1 > "$outfile"
          EOF
          chmod +x pr_fetch.sh

      - name: Fetch last week PRs
        run: ./pr_fetch.sh "$SCOPE" "$SINCE_WEEK_UTC" "$UNTIL_UTC" out/last_week.tsv

      - name: Fetch last 3 months PRs
        run: ./pr_fetch.sh "$SCOPE" "$SINCE_3MO_UTC" "$UNTIL_UTC" out/last_3_months.tsv

      - name: Write Job Summary
        shell: bash
        run: |
          render() {
            local label="$1"; local file="$2"
            echo "## ${label}" >> "$GITHUB_STEP_SUMMARY"
            if [[ ! -s "$file" ]]; then
              echo "_No merged PRs in window._" >> "$GITHUB_STEP_SUMMARY"
              return
            fi
            # TSV fields: merged_at, title, author, sha7, repo
            while IFS=$'\t' read -r merged_at title author sha7 repo; do
              # Output: "<title> by @<author> in <sha7> <repo>"
              echo "${title} by @${author} in ${sha7} ${repo}" >> "$GITHUB_STEP_SUMMARY"
            done < "$file"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          }
          render "Last week" out/last_week.tsv
          render "Last 3 months" out/last_3_months.tsv

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pr-digest
          path: out/
          if-no-files-found: warn
