name: "PR Digest"

on:
  workflow_dispatch:
    inputs:
      scope:
        description: "Comma-separated repos (owner/repo) OR 'org:armbian'"
        required: false
        default: "armbian/build,armbian/configng"
      tz:
        description: "Timezone (IANA)"
        required: false
        default: "Europe/Ljubljana"
      version:
        description: "Version tag for release"
        required: true
  schedule:
    - cron: "5 6 * * MON"   # weekly, Mondays 06:05 UTC

permissions:
  contents: read

jobs:
  pr-digest:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SCOPE: ${{ inputs.scope || 'armbian/build,armbian/configng' }}
      TZ: ${{ inputs.tz || 'Europe/Ljubljana' }}
      VERSION_OVERRIDE: ${{ inputs.version }}

    steps:
      - name: Ensure dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Compute time windows (UTC)
        id: when
        shell: bash
        run: |
          UNTIL_UTC="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          SINCE_WEEK_UTC="$(date -u -d '7 days ago' +%Y-%m-%dT%H:%M:%SZ)"
          SINCE_3MO_UTC="$(date -u -d '90 days ago' +%Y-%m-%dT%H:%M:%SZ)"
          echo "UNTIL_UTC=$UNTIL_UTC" >> "$GITHUB_ENV"
          echo "SINCE_WEEK_UTC=$SINCE_WEEK_UTC" >> "$GITHUB_ENV"
          echo "SINCE_3MO_UTC=$SINCE_3MO_UTC" >> "$GITHUB_ENV"

      - name: Prepare workspace
        run: mkdir -p out

      - name: Write helper script
        shell: bash
        run: |
          cat > pr_fetch.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          scope="${1:?}"     # "org:armbian" or "owner/repo,owner/repo2"
          since="${2:?}"     # ISO UTC
          until="${3:?}"     # ISO UTC
          outfile="${4:?}"   # path

          collect() {
            local q="$1"
            gh api -X GET search/issues \
              -f q="$q" \
              -f sort="updated" -f order="desc" \
              -f per_page=100 --paginate \
              -q '.items[] | {number: .number, repo: (.repository_url | sub("^.*/repos/";"")), pr_api: .pull_request.url}'
          }

          tmp="$(mktemp)"
          if [[ "$scope" == org:* ]]; then
            org="${scope#org:}"
            q="org:${org} is:pr is:merged merged:${since}..${until} archived:false"
            collect "$q" > "$tmp"
          else
            IFS=',' read -r -a repos <<< "$scope"
            : > "$tmp"
            for r in "${repos[@]}"; do
              r_trim="$(echo "$r" | xargs)"
              q="repo:${r_trim} is:pr is:merged merged:${since}..${until}"
              collect "$q" >> "$tmp"
            done
          fi

          # De-dup and enrich
          jq -s 'unique_by(.repo + "|" + (.number|tostring))' "$tmp" | jq -c '.[]' | \
          while read -r row; do
            repo=$(echo "$row" | jq -r .repo)
            num=$(echo "$row"  | jq -r .number)
            pr=$(gh api "repos/${repo}/pulls/${num}")

            title=$(jq -r .title <<<"$pr")
            author=$(jq -r .user.login <<<"$pr")

            # Skip bots
            if [[ "$author" == "github-actions[bot]" || "$author" == "dependabot[bot]" ]]; then
              continue
            fi

            merged_at=$(jq -r .merged_at <<<"$pr")
            html_url=$(jq -r .html_url <<<"$pr")

            printf "%s\t%s\t%s\t%s\n" "$merged_at" "$title" "$author" "$html_url"
          done | sort -k1,1 > "$outfile"
          EOF
          chmod +x pr_fetch.sh

      - name: Fetch last week
        run: ./pr_fetch.sh "$SCOPE" "$SINCE_WEEK_UTC" "$UNTIL_UTC" out/last_week.tsv

      - name: Fetch last 3 months
        run: ./pr_fetch.sh "$SCOPE" "$SINCE_3MO_UTC" "$UNTIL_UTC" out/last_3_months.tsv

      - name: Write Markdown digest to summary & body.html
        shell: bash
        run: |
          render() {
            local label="$1"; local file="$2"
            echo "## ${label}" >> "$GITHUB_STEP_SUMMARY"
            echo "<h2>${label}</h2>" >> body.html
            if [[ ! -s "$file" ]]; then
              echo "_No merged PRs in this period._" >> "$GITHUB_STEP_SUMMARY"
              echo "<p><em>No merged PRs in this period.</em></p>" >> body.html
              echo "" >> "$GITHUB_STEP_SUMMARY"
              return
            fi
            while IFS=$'\t' read -r merged_at title author url; do
              echo "* ${title}.  by @${author} in ${url}" >> "$GITHUB_STEP_SUMMARY"
              echo "<li>${title}. by @${author} in <a href='${url}'>PR</a></li>" >> body.html
            done < "$file"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          }

          # Start fresh body file
          echo "<h1>Weekly Digest</h1>" > body.html
          echo "<ul>" >> body.html
          render "Last week" out/last_week.tsv
          echo "</ul>" >> body.html

      - name: Upload raw data (artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: pr-digest
          path: out/
          if-no-files-found: warn

  # Your existing pipeline likely has a "gradle" job already producing *.txt artifacts.
  # We keep your exact "make" job signature and merge pattern.
  make:
    needs: pr-digest
    name: "Sort"
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: "merged"
        uses: actions/upload-artifact/merge@v4
        with:
          delete-merged: true

      - uses: actions/download-artifact@v5
        with:
          name: pr-digest

      - name: Display structure of downloaded files
        run: find out/ -name "*.tsv" -exec cat {} \; | sort >> $GITHUB_STEP_SUMMARY

      - uses: geekyeggo/delete-artifact@v5
        with:
          name: merged-artifacts
          failOnError: false

      - name: "Checkout OS repository to get latest tag"
        uses: actions/checkout@v5
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os

      - name: "Read nightly version from file"
        run: |
          cat "os/nightly.json" | jq '.version' | sed "s/\"//g" | sed 's/^/VERSION_OVERRIDE=/' >> $GITHUB_ENV

      - name: "Generate body file"
        run: |
          echo "
            <h1>Armbian rolling releases</h1>
            <p>
            <a href='https://www.armbian.com/download/'><img alt='Armbian Linux stable' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20current&query=CURRENT&color=f71000&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
            <a href='https://www.armbian.com/download/'><img alt='Armbian Linux rolling' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20edge&query=EDGE&color=34be5b&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
            </p>
            <br>

            - rolling releases are available at the bottom of <a href='https://www.armbian.com/download/' target=_blanks>official download pages</a>
            - <a href='https://github.com/armbian/os/wiki/Enable-build-configuration'>How to change type of images that are provided by Armbian</a>?
            - How to switch between <a href='https://www.armbian.com/newsflash/armbian-leaflet-25/' target=_blank>stable and rolling release</a>?

            Please note that <b>Armbian Rolling Releases</b> are not recommended for production environments, as these builds are not thoroughly tested. However, in most cases, they should work well. Before making this switch, we recommend checking our <a target=_blanks href='https://github.com/armbian/os?tab=readme-ov-file#latest-smoke-tests-results'>automated tests</a>. 
            </p>

          ## What's was changed in past week?" > body.html
          # Append all merged *.txt (includes pr-digest-week.txt from the 'digest' job + others)
          find out/ -name "*.tsv" -exec cat {} \; >> body.html

      - uses: ncipollo/release-action@v1
        with:
          owner: 'armbian'
          repo: 'build'
          tag: "v${{ env.VERSION_OVERRIDE }}"
          name: "v${{ env.VERSION_OVERRIDE }}"
          generateReleaseNotes: "false"
          prerelease: "false"
          makeLatest: "true"
          bodyFile: "body.html"
          allowUpdates: "true"
          skipIfReleaseExists: "true"
          token: ${{ secrets.RELEASE_TOKEN }}
