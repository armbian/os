name: Repository update (admin)
on:
  repository_dispatch:
    types: ["Repository update"]
#  schedule:
#    - cron: "00 3 * * *"
  workflow_dispatch:
    inputs:
      UPDATE_STABLE_REPO:
        description: 'yes = when you are sure packages are on mirrors'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'
      PKG_REMOVE:
        description: Packages to remove [pkg-name] or [Name (% linux*edge*)]
        required: false
        type: string

concurrency:
  group: pipeline
  cancel-in-progress: false

jobs:

  Check:

    name: "Check membership"
    runs-on: fast
    steps:

      - name: "Check membership"
        uses: armbian/actions/team-check@main
        with:
          ORG_MEMBERS: ${{ secrets.ORG_MEMBERS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEAM: "Release manager"

  external:
    name: "Download external"
    needs: Check

    if: ${{ github.repository_owner == 'Armbian' }}
    uses: armbian/scripts/.github/workflows/download-and-test-external.yml@main
    with:
      ACCESS_NAME: armbian
      BUILD_RUNNER: "ubuntu-latest"
      #BUILD_RUNNER: "X64"
    secrets:
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      KEY_UPLOAD: ${{ secrets.KEY_UPLOAD }}
      HOST_UPLOAD: ${{ secrets.HOST_UPLOAD }}
      HOST_UPLOAD_USER: ${{ secrets.HOST_UPLOAD_USER }}
      HOST_UPLOAD_PORT: ${{ secrets.HOST_UPLOAD_PORT }}
      KNOWN_HOSTS_ARMBIAN_UPLOAD: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}

  gradle:
    needs: external
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        repository: ["debs-beta","debs"]

    name: Make
    runs-on: repository
    steps:

      - name: "Clean beta repository"
        run: |
        
          if [[ "${{ matrix.repository }}" == "debs-beta" ]]; then
            rm -rf /outgoing/repository-beta/{public,db,pool}
          fi

      - name: Checkout build repository
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          fetch-depth: 1
          clean: false

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY1 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE1 }}

      - name: "Build repository ${{ matrix.repository }}"
        run: |

          REPOSITORY="${{ matrix.repository }}"
          TARGET=${REPOSITORY/debs/repository}
          sed -i 's|"gpgProvider": ".*"|"gpgProvider": "gpg2"|g' tools/repository/aptly.conf
          sudo chown -R ${USER}.${USER} /outgoing/${TARGET}
          # clean
          if [[ -n "${{ inputs.PKG_REMOVE }}" ]]; then
             PKG_REMOVE="|${{ inputs.PKG_REMOVE }}"
          fi
          # remove certain and custom package
          # cleaning is optional so lets apply some magic as we don't want this at every rebuild
          day=$( date +%d )
          if [ "$day" = "01" ] || [ "$day" = "15" ]; then
              tools/repository/repo -i /incoming/${{ matrix.repository }} -o /outgoing/${TARGET} -r buster,bullseye,bookworm,trixie,sid,focal,kinetic,jammy,lunar,mantic,noble -p ${{ secrets.GPG_PASSPHRASE1 }} -c delete -l "Name (% firefox*)|Name (% thunderbird*)|code|codium|Name (% google-chrome*)|Name (% box64*)|Name (% box86*)|chromium-browser|zoom|gh${PKG_REMOVE}"
          fi
          # add from incoming
          tools/repository/repo -i /incoming/${{ matrix.repository }} -o /outgoing/${TARGET} -r buster,bullseye,bookworm,trixie,sid,focal,kinetic,jammy,lunar,mantic,noble -p ${{ secrets.GPG_PASSPHRASE1 }} -c update
          # create index
          tools/repository/repo -i /incoming/${{ matrix.repository }} -o /outgoing/${TARGET} -r buster,bullseye,bookworm,trixie,sid,focal,kinetic,jammy,lunar,mantic,noble -p ${{ secrets.GPG_PASSPHRASE1 }} -c html > /outgoing/${TARGET}/public/content.html

  Prepare:
    name: "Upload to servers"
    needs: gradle
    outputs:
      matrix: ${{steps.json.outputs.JSON_CONTENT}}
    runs-on: ubuntu-latest
    steps:

      - name: Get primary mirrors from database
        id: json
        run: |
          echo 'JSON_CONTENT<<EOF' >> $GITHUB_OUTPUT
          curl -H "Authorization: Token ${{ secrets.NETBOX_TOKEN }}" -H "Accept: application/json; indent=4" \
          "https://stuff.armbian.com/netbox/api/virtualization/virtual-machines/?limit=500&name__empty=false&device_role=Mirror&tag=push&status=failed&status=active" \
          | jq '.results[] | .name' | grep -v null | sed "s/\"//g" | jq -cnR '[inputs | select(length>0)]' | jq >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  Sync:
    name: "Files"
    runs-on: repository
    needs: Prepare
    outputs:
      matrix: ${{needs.Prepare.outputs.matrix}}
    if: ${{ needs.Prepare.outputs.matrix != '[]' && needs.Prepare.outputs.matrix != '' }}
    timeout-minutes: 60
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:

        node: ${{fromJson(needs.Prepare.outputs.matrix)}}

    steps:

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_UPLOAD }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
          if_key_exists: replace

      - name: What to sync?
        run: |

          JSON=$(curl -H "Authorization: Token ${{ secrets.NETBOX_TOKEN }}" -H "Accept: application/json; indent=4" \
          "https://stuff.armbian.com/netbox/api/virtualization/virtual-machines/?limit=500&name__empty=false&name=${{ matrix.node }}" | jq)
          SERVER_PATH=$(echo $JSON | jq '.results[] | .custom_fields["path"]' | sed "s/\"//g")
          SERVER_PORT=$(echo $JSON | jq '.results[] | .custom_fields["port"]' | sed "s/\"//g")
          SERVER_USERNAME=$(echo $JSON | jq '.results[] | .custom_fields["username"]' | sed "s/\"//g")

          TARGETS=($(echo $JSON | jq '.results[] | .tags' | jq '.[].name' | grep -v null | grep -v Push | sed "s/\"//g"))

          for target in "${TARGETS[@]}"; do
              ssh-keygen -f "${HOME}/.ssh/known_hosts" -R "${{ matrix.node }}"
              echo "Synching $target" >> $GITHUB_STEP_SUMMARY
              if [[ "$target" == "debs" ]]; then rsync -ar --progress -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" --exclude "dists" --exclude "control" /outgoing/repository/public/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/apt ; fi
              if [[ "$target" == "debs-beta" ]]; then rsync -ar --progress -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" --exclude "dists" --exclude "control" /outgoing/repository-beta/public/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/beta ; fi
              #if [[ "$target" == "images" ]]; then rsync -ar --progress -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" --exclude "control" /storage2/dl/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/dl ; fi
          done

  Index:
    name: "Index"
    runs-on: repository
    needs: Sync
    if: ${{ needs.Sync.outputs.matrix != '[]' && needs.Sync.outputs.matrix != '' }}
    timeout-minutes: 60
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:

        node: ${{fromJson(needs.Sync.outputs.matrix)}}

    steps:

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_UPLOAD }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
          if_key_exists: replace

      - name: What to sync?
        run: |

          JSON=$(curl -H "Authorization: Token ${{ secrets.NETBOX_TOKEN }}" -H "Accept: application/json; indent=4" \
          "https://stuff.armbian.com/netbox/api/virtualization/virtual-machines/?limit=500&name__empty=false&name=${{ matrix.node }}" | jq)
          SERVER_PATH=$(echo $JSON | jq '.results[] | .custom_fields["path"]' | sed "s/\"//g")
          SERVER_PORT=$(echo $JSON | jq '.results[] | .custom_fields["port"]' | sed "s/\"//g")
          SERVER_USERNAME=$(echo $JSON | jq '.results[] | .custom_fields["username"]' | sed "s/\"//g")

          TARGETS=($(echo $JSON | jq '.results[] | .tags' | jq '.[].name' | grep -v null | grep -v Push | sed "s/\"//g"))

          for target in "${TARGETS[@]}"; do
              ssh-keygen -f "${HOME}/.ssh/known_hosts" -R "${{ matrix.node }}"
              echo "Synching $target" >> $GITHUB_STEP_SUMMARY
              if [[ "$target" == "debs" && "${{ inputs.UPDATE_STABLE_REPO }}" == "yes" ]]; then rsync -ar --progress -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" /outgoing/repository/public/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/apt ; fi
              if [[ "$target" == "debs-beta" ]]; then rsync -ar --progress -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" /outgoing/repository-beta/public/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/beta ; fi
              # delete at the end
              if [[ "$target" == "debs" && "${{ inputs.UPDATE_STABLE_REPO }}" ]]; then rsync -ar --progress --delete -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" /outgoing/repository/public/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/apt ; fi
              if [[ "$target" == "debs-beta" ]]; then rsync -ar --progress --delete -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" /outgoing/repository-beta/public/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/beta ; fi
              #if [[ "$target" == "images" && "${{ inputs.UPDATE_STABLE_REPO }}" ]]; then rsync -ar --progress --delete -e "ssh -p ${SERVER_PORT} -o StrictHostKeyChecking=accept-new" /storage2/dl/ ${SERVER_USERNAME}@${{ matrix.node }}:${SERVER_PATH}/dl ; fi              
          done

  dispatch:
    name: "Refresh web and redirector index"
    if: ${{ github.repository_owner == 'Armbian' }}
    needs: Index
    runs-on: ubuntu-latest
    steps:

      - name: "Run webindex update action"
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.DISPATCH }}
          repository: armbian/os
          event-type: "Webindex update"

      - name: "Run redirector update action"
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.DISPATCH }}
          repository: armbian/os
          event-type: "Redirector update"

#
#      - name: Repository Dispatch
#        uses: peter-evans/repository-dispatch@v3
#        with:
#          token: ${{ secrets.DISPATCH }}
#          repository: 'armbian/os'
#          event-type: "Smoke tests"
#          client-payload: '{"powermanagement": true}'
