#
# This action recreate action for building stable images
#
name: Recreate Matrix (push)
on:
  push:
    branches:
      - 'main'
    paths:
      - "userpatches/*.template"
      - "userpatches/gha/**"
      - "userpatches/gha/chunks/**"
      - ".github/workflows/recreate-matrix.yml"

  workflow_dispatch:
  repository_dispatch:
    types: [Recreate Matrix]

concurrency:
  group: matrix-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build:
    name: Recreate action
    if: ${{ github.repository_owner == 'Armbian' }}
    runs-on: linux
    steps:

    - name: Checkout Armbian Framework
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        repository: armbian/build
        ref:  main
        fetch-depth: 0
        clean: false
        path: build

    - name: Checkout Armbian OS Config
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        repository: armbian/os
        ref:  main
        clean: false
        fetch-depth: 0
        path: os

    - name: "Rsync userpatches"
      run: |

        rsync -av os/userpatches/. build/userpatches/
        rm -f build/userpatches/targets.yaml

    - name: "Generate builds lists"
      run: |

        # generate lists to include them
        ls -1 build/config/boards/*.{conf,eos,wip,csc} | cut -d"/" -f4 | cut -d"." -f1 | uniq | sed 's/.*/        - &/' > /tmp/boards.txt
        grep BOARD_MAINTAINER build/config/boards/*.{conf,eos,wip,csc} | cut -d":" -f2 | cut -d"=" -f2 | sed 's/"/ /g' | tr -d '\n' | tr -s ' ' | xargs -n1 | sort | uniq | sed 's/.*/        - &/' > /tmp/maintainers.txt
        git ls-remote --heads https://github.com/armbian/build | grep "v2" | cut -d"/" -f3 | sort | tail -1 | sed '1s/^/main\n/' | sed 's/.*/        - &/' > /tmp/branches.txt

        function make-targets()
        {
        
        # cycle all board configs but .eos (end of support, which we swithc to when it breaks)

        # We are replacing in target yaml. copy from template
        cp $2.template $2.yaml

        for SECTION in $1; do

            # debug
            echo "Adding: $SECTION to $2" >> $GITHUB_STEP_SUMMARY

            OUTPUT=$(for board in $(ls -1 build/config/boards/*.{conf,csc,wip,tvb}); do

                    # read board family and determine ARCH
                    BOARDFAMILY=$(grep BOARDFAMILY $board | cut -d '"' -f 2)
                    source build/config/sources/families/${BOARDFAMILY}.conf 2>/dev/null || true
           
                    # board status defines where it goes
                    if [[ $board == *.conf* ]]; then SUPPORT="standard-support";
                    elif [[ $board == *.wip* ]]; then SUPPORT="staging";
                    else SUPPORT="community-maintained"; fi
        
                    # ... and board ARCH defines where it goes
                    TARGET_SECTION="${SUPPORT}-slow-hdmi"
                    if [[ $ARCH == riscv64 ]]; then TARGET_SECTION="${SUPPORT}-riscv64";
                    elif grep -q HAS_VIDEO_OUTPUT $board; then TARGET_SECTION="${SUPPORT}-headless";
                    elif [[ $ARCH == arm64 || $ARCH == amd64 ]]; then TARGET_SECTION="${SUPPORT}-fast-hdmi"
                    fi

                    # read kernel target
                    KERNEL_TARGET=$(grep KERNEL_TARGET $board | cut -d '"' -f 2)
                    # extract board name from config
                    board=$(echo $board | cut -d"/" -f4 | cut -d"." -f1)

                    # skip boards listed in this file
                    if grep -q $board os/userpatches/targets-automation.blacklist; then continue; fi

                    # our default is current build target. Use it or search further
                    if [[ $TARGET_SECTION == $SECTION ]]; then

                        if [[ "${KERNEL_TARGET}" == *current* ]]; then

                            # check if we have extension mapping defined
                            EXTENSION=$(grep -P '^(?=.*'$board')(?=.*current)' os/userpatches/targets-extensions.map | cut -d"=" -f2)
                            if [[ -n $EXTENSION ]]; then EXTENSION=", ENABLE_EXTENSIONS: $EXTENSION"; fi
                            echo "    - { BOARD: $board, BRANCH: current${EXTENSION} }"

                        elif [[ "${KERNEL_TARGET}" == *edge* ]]; then

                            # check if we have extension mapping defined
                            EXTENSION=$(grep -P '^(?=.*'$board')(?=.*edge)' os/userpatches/targets-extensions.map | cut -d"=" -f2)
                            if [[ -n $EXTENSION ]]; then EXTENSION=", ENABLE_EXTENSIONS: $EXTENSION"; fi
                            echo "    - { BOARD: $board, BRANCH: edge${EXTENSION} }"

                        elif [[ "${KERNEL_TARGET}" == *legacy* ]]; then

                            # check if we have extension mapping defined
                            EXTENSION=$(grep -P '^(?=.*'$board')(?=.*legacy)' os/userpatches/targets-extensions.map | cut -d"=" -f2)
                            if [[ -n $EXTENSION ]]; then EXTENSION=", ENABLE_EXTENSIONS: $EXTENSION"; fi
                            echo "    - { BOARD: $board, BRANCH: legacy${EXTENSION}}"

                        else

                            # otherwise it must be custom kernel target
                            EXTENSION=$(grep -P '^(?=.*'${board}')(?=.*'${KERNEL_TARGET}')' os/userpatches/targets-extensions.map | cut -d"=" -f2)
                            if [[ -n $EXTENSION ]]; then EXTENSION=", ENABLE_EXTENSIONS: $EXTENSION"; fi
                            echo "    - { BOARD: $board, BRANCH: ${KERNEL_TARGET}${EXTENSION}}"

                        fi

                    fi

                done)

                if [[ -n $OUTPUT ]]; then
                    TEMPFILE=$(mktemp)
                    (
                    echo "  $SECTION: &$SECTION"
                    echo "    # auto generated section"
                    while IFS= read -r line
                    do  
                    echo "$line"
                    done <<< $OUTPUT                
                    # mark end of the section
                    echo -e "    # end of auto generated section\n"
                    ) > $TEMPFILE

                    # since its not empty, add to the yaml file
                    sed -i "/  # automated lists start/r $TEMPFILE" ${2}.yaml

                    # add also to section
                    sed -i -e '/  automated-section/,/items/{/items/a \ \ \ \ \ \ - *'$SECTION'' -e '}' ${2}.yaml
                else
                    # remove tags from manually made sections or it will exit with error
                    sed -i '/'$SECTION'/d' ${2}.yaml
                    echo "Removing $SECTION from $2"
                fi
        done        
        }

        # define which sections goes into which list
        BUILD_SECTIONS_STANDARD_SUPPORT="
                standard-support-slow-hdmi
                staging-slow-hdmi
                standard-support-fast-hdmi
                staging-fast-hdmi
                standard-support-headless
                staging-headless
                supported-riscv64
                staging-riscv64
        "
        BUILD_SECTIONS_COMMUNITY_MAINTAINED="
                community-maintained-slow-hdmi
                community-maintained-fast-hdmi
                community-maintained-headless
                community-maintained-riscv64
        "
        BUILD_SECTIONS_NIGHTLY="
                standard-support-slow-hdmi
                staging-slow-hdmi
                standard-support-fast-hdmi
                staging-fast-hdmi
                standard-support-headless
                staging-headless
                supported-riscv64
                staging-riscv64
                community-maintained-slow-hdmi
                community-maintained-fast-hdmi
                community-maintained-headless
                community-maintained-riscv64
        "

        # $1 = parts to add
        # $2 = filename that copy from .template to .yaml
        make-targets "${BUILD_SECTIONS_STANDARD_SUPPORT}" "os/userpatches/targets-release-standard-support"
        make-targets "${BUILD_SECTIONS_COMMUNITY_MAINTAINED}" "os/userpatches/targets-release-community-maintained"
        make-targets "${BUILD_SECTIONS_NIGHTLY}" "os/userpatches/targets-release-nightly"

    - name: "Generate Action Script"
      run: |

        cd build
        # Last stable branch
        #LAST=$(git branch -r | grep "v2" | tail -1 | cut -d"/" -f2)

        # generate targets-release-community-maintained.yaml
        #cp userpatches/targets-release-community-maintained.template userpatches/targets-release-community-maintained.yaml
        #sed -i '/    # unsupported/r /tmp/unsupported.txt' userpatches/targets-release-community-maintained.yaml
        #sed -i '/    # unsupported-headless/r /tmp/unsupported-headless.txt' userpatches/targets-release-community-maintained.yaml

        #git add userpatches/targets-release-community-maintained.yaml
        #git add userpatches/targets-release-community-maintained.yaml
        #git add -f userpatches/targets-release-community-maintained.yaml

        #
        # copy nightly templates
        #
        cp userpatches/gha/gha_config_nightly.yaml userpatches/gha/gha_config.yaml
        cp userpatches/targets-release-nightly.yaml userpatches/targets.yaml
        bash ./compile.sh gha-template
        # add boards, maintainers and branches
        sed -i '/# boards/r /tmp/boards.txt' output/info/artifact-image-complete-matrix.yml
        sed -i '/# maintainers/r /tmp/maintainers.txt' output/info/artifact-image-complete-matrix.yml
        sed -i '/# branches/r /tmp/branches.txt' output/info/artifact-image-complete-matrix.yml

        # we need unique concurency id
        sed -i "s/pipeline-/pipeline-nightly/" output/info/artifact-image-complete-matrix.yml
        cp output/info/artifact-image-complete-matrix.yml ../os/.github/workflows/complete-artifact-matrix-nightly.yml

        #
        # copy old stable templates
        #
        #cp userpatches/gha/gha_config_old_stable.yaml userpatches/gha/gha_config.yaml
        #cp userpatches/targets-release.yaml userpatches/targets.yaml
        #sed -i 's/build_ref: .*/build_ref: "'$LAST'"/' userpatches/gha/gha_config.yaml
        #bash ./compile.sh gha-template
        # add boards and maintainers
        #sed -i '/# boards/r /tmp/boards.txt' output/info/artifact-image-complete-matrix.yml
        #sed -i '/# maintainers/r /tmp/maintainers.txt' output/info/artifact-image-complete-matrix.yml
        # we need unique concurency id
        #sed -i "s/pipeline-/pipeline-old-stable/" output/info/artifact-image-complete-matrix.yml
        #cp output/info/artifact-image-complete-matrix.yml ../os/.github/workflows/complete-artifact-matrix-old-stable.yml


        #
        # copy standard support release templates
        #
        cp userpatches/gha/gha_config_release_standard_support.yaml userpatches/gha/gha_config.yaml
        cp userpatches/targets-release-standard-support.yaml userpatches/targets.yaml
        bash ./compile.sh gha-template
        # add boards and maintainers
        sed -i '/# boards/r /tmp/boards.txt' output/info/artifact-image-complete-matrix.yml
        sed -i '/# maintainers/r /tmp/maintainers.txt' output/info/artifact-image-complete-matrix.yml
        sed -i '/# branches/r /tmp/branches.txt' output/info/artifact-image-complete-matrix.yml
        # we need unique concurency id
        sed -i "s/pipeline-/standard-support/" output/info/artifact-image-complete-matrix.yml
        cp output/info/artifact-image-complete-matrix.yml ../os/.github/workflows/complete-artifact-matrix-standard-support.yml

        #
        # copy unsupported release templates
        #
        cp userpatches/gha/gha_config_release_unsupported.yaml userpatches/gha/gha_config.yaml
        cp userpatches/targets-release-community-maintained.yaml userpatches/targets.yaml
        bash ./compile.sh gha-template
        # add boards and maintainers
        sed -i '/# boards/r /tmp/boards.txt' output/info/artifact-image-complete-matrix.yml
        sed -i '/# maintainers/r /tmp/maintainers.txt' output/info/artifact-image-complete-matrix.yml
        sed -i '/# branches/r /tmp/branches.txt' output/info/artifact-image-complete-matrix.yml
        # we need unique concurency id
        sed -i "s/pipeline-/unsupported/" output/info/artifact-image-complete-matrix.yml
        cp output/info/artifact-image-complete-matrix.yml ../os/.github/workflows/complete-artifact-matrix-unsupported.yml


        #
        # copy all templates
        #
        cp userpatches/gha/gha_config_all.yaml userpatches/gha/gha_config.yaml
        cp userpatches/targets-all-not-eos.yaml userpatches/targets.yaml
        bash ./compile.sh gha-template
        # add boards and maintainers
        sed -i '/# boards/r /tmp/boards.txt' output/info/artifact-image-complete-matrix.yml
        sed -i '/# maintainers/r /tmp/maintainers.txt' output/info/artifact-image-complete-matrix.yml
        sed -i '/# branches/r /tmp/branches.txt' output/info/artifact-image-complete-matrix.yml
        # we need unique concurency id
        sed -i "s/pipeline-/pipeline-all/" output/info/artifact-image-complete-matrix.yml
        cp output/info/artifact-image-complete-matrix.yml ../os/.github/workflows/complete-artifact-matrix-all.yml

        cd ../os
        git config --local user.email "info@armbian.com"
        git config --local user.name "Armbianworker"

        # Update build list
        git add userpatches/targets-release-standard-support.yaml
        git add userpatches/targets-release-community-maintained.yaml
        git add userpatches/targets-release-nightly.yaml

        # Add Action Scritps
        git add .github/workflows/complete-artifact-matrix-nightly.yml
        #git add .github/workflows/complete-artifact-matrix-old-stable.yml
        git add .github/workflows/complete-artifact-matrix-standard-support.yml
        git add .github/workflows/complete-artifact-matrix-unsupported.yml
        git add .github/workflows/complete-artifact-matrix-all.yml
        git commit --allow-empty -m "Update generated GHA chunk workflow artifact-image-complete-matrix.yml" -a

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.ACCESS_TOKEN_ARMBIANWORKER }}
        repository: armbian/os
        branch: ${{ github.ref }}
        directory: os
